# Check https://dart-lang.github.io/linter/lints/ for lint rules documentation
# Update from http://dart-lang.github.io/linter/lints/options/options.html

analyzer:
  errors:
    missing_required_param: error
    missing_return: error
    unused_element: ignore

  exclude:
    - "**/*.g.dart"
    - "**/*.pb*.dart"
    - "**/*.swagger*.dart"

### Those are all currently available lints, those are label descriptions:
### - BEST PRACTICES - those are useful rules that we should enable when we have the time
### - GOOD TO HAVE - rules that can be beneficial but the team needs to agree on using them
### - NOT ENABLED - rules that we can discuss if we want to enable otherwise we should state the reason why we decided
###                 not tu use them
### - TO BE VERIFIED  - rules that has been recently added to dart but we need to verify if those are useful for us
### - NOT YET AVAILABLE - rules that are in a later version of dart but not yet in our project
### - FLUTTER RECOMMENDED - this is recommended by `flutter_lints` package
###
### The rest of rules are disabled and the reason for it is stated

linter:
  rules:
    - always_declare_return_types
    - always_put_control_body_on_new_line
    # - always_put_required_named_parameters_first # not crucial and we do it all around
    # - always_specify_types # we use type inference
    - always_use_package_imports
    - annotate_overrides
    - avoid_annotating_with_dynamic
    - avoid_bool_literals_in_conditional_expressions
    # - avoid_catches_without_on_clauses # we catch both Exceptions and Errors
    # NOT ENABLED  - avoid_catching_errors
    # NOT ENABLED  - avoid_classes_with_only_static_members
    # NOT ENABLED  - avoid_double_and_int_checks
    # - avoid_dynamic_calls # we use dynamics in dispatch
    - avoid_empty_else
    - avoid_equals_and_hash_code_on_mutable_classes
    # NOT ENABLED  - avoid_escaping_inner_quotes
    - avoid_field_initializers_in_const_classes
    - avoid_final_parameters
    # FLUTTER RECOMMENDED  - avoid_function_literals_in_foreach_calls
    # NOT ENABLED  - avoid_implementing_value_types
    - avoid_init_to_null
    # NOT ENABLED  - avoid_js_rounded_ints
    # NOT ENABLED  - avoid_multiple_declarations_per_line
    - avoid_null_checks_in_equality_operators
    - avoid_positional_boolean_parameters
    - avoid_print
    # NOT ENABLED  - avoid_private_typedef_functions
    - avoid_redundant_argument_values
    - avoid_relative_lib_imports
    - avoid_renaming_method_parameters
    - avoid_return_types_on_setters
    # - avoid_returning_null # we do this commonly
    - avoid_returning_null_for_void
    # NOT ENABLED  - avoid_returning_this
    # NOT ENABLED  - avoid_setters_without_getters
    - avoid_shadowing_type_parameters
    - avoid_single_cascade_in_expression_statements
    # NOT ENABLED  - avoid_slow_async_io
    # NOT ENABLED  - avoid_type_to_string
    - avoid_types_as_parameter_names
    # - avoid_types_on_closure_parameters # conflicts with always_specify_types
    - avoid_unnecessary_containers
    - avoid_unused_constructor_parameters
    # NOT ENABLED  - avoid_void_async
    # FLUTTER RECOMMENDED  - avoid_web_libraries_in_flutter
    - await_only_futures
    - camel_case_extensions
    # NOT ENABLED  - camel_case_types
    # NOT ENABLED  - cancel_subscriptions
    - cascade_invocations
    # NOT ENABLED  - cast_nullable_to_non_nullable
    # BEST PRACTICES  - close_sinks
    # NOT YET AVAILABLE  - collection_methods_unrelated_type
    # - combinators_ordering # Not important for us
    # NOT ENABLED  - comment_references
    - conditional_uri_does_not_exist
    # - constant_identifier_names # we are using those all around
    # NOT ENABLED  - control_flow_in_finally
    - curly_braces_in_flow_control_structures
    # - dangling_library_doc_comments # Not important
    # NOT ENABLED  - depend_on_referenced_packages # Doesn't seem to work properly
    # NOT ENABLED  - deprecated_consistency
    # - diagnostic_describe_all_properties # nice to have for libs but overkill for applications
    # NOT ENABLED  - directives_ordering
    # BEST PRACTICES  - discarded_futures # This is useful, but we use it everywhere, consider fixing
    # NOT ENABLED  - do_not_use_environment # We do this
    - empty_catches
    - empty_constructor_bodies
    - empty_statements
    # NOT YET AVAILABLE  - enable_null_safety
    - eol_at_end_of_file
    - exhaustive_cases
    - file_names
    # NOT ENABLED  - flutter_style_todos
    # NOT ENABLED  - hash_and_equals
    - implementation_imports
    # NOT YET AVAILABLE  - implicit_call_tearoffs
    # NOT ENABLED  - iterable_contains_unrelated_type
    - join_return_with_assignment
    # NOT ENABLED  - leading_newlines_in_multiline_strings
    # - library_annotations We don't need it
    - library_names
    - library_prefixes
    # - library_private_types_in_public_api # This does not work with private state on widgets
    # NOT ENABLED - lines_longer_than_80_chars # we use it when temporarily adding strings before translations
    # NOT ENABLED  - list_remove_unrelated_type
    # NOT ENABLED  - literal_only_boolean_expressions
    - missing_whitespace_between_adjacent_strings
    # NOT ENABLED  - no_adjacent_strings_in_list
    # GOOD TO HAVE  - no_default_cases
    - no_duplicate_case_values
    - no_leading_underscores_for_library_prefixes
    # - no_leading_underscores_for_local_identifiers # We are doing this
    - no_logic_in_create_state
    # NOT ENABLED  - no_runtimeType_toString
    # NOT ENABLED  - non_constant_identifier_names
    - noop_primitive_operations
    # NOT ENABLED  - null_check_on_nullable_type_parameter
    - null_closures
    - omit_local_variable_types # opposite of always_specify_types
    # NOT ENABLED  - one_member_abstracts
    - only_throw_errors
    # NOT ENABLED  - overridden_fields
    # NOT ENABLED  - package_api_docs
    # NOT ENABLED  - package_names
    # NOT ENABLED  - package_prefixed_library_names
    # - parameter_assignments # we do this commonly
    - prefer_adjacent_string_concatenation
    # NOT ENABLED  - prefer_asserts_in_initializer_lists
    # - prefer_asserts_with_message # we do this commonly
    - prefer_collection_literals
    - prefer_conditional_assignment
    - prefer_const_constructors
    - prefer_const_constructors_in_immutables
    - prefer_const_declarations
    - prefer_const_literals_to_create_immutables
    # NOT ENABLED  - prefer_constructors_over_static_methods
    - prefer_contains
    # - prefer_double_quotes # We use single quotes
    # - prefer_expression_function_bodies
    - prefer_final_fields
    - prefer_final_in_for_each
    - prefer_final_locals
    # - prefer_final_parameters # We do this
    - prefer_for_elements_to_map_fromIterable
    # NOT ENABLED  - prefer_foreach
    # FLUTTER RECOMMENDED  - prefer_function_declarations_over_variables
    - prefer_generic_function_type_aliases
    - prefer_if_elements_to_conditional_expressions
    - prefer_if_null_operators
    - prefer_initializing_formals
    - prefer_inlined_adds
    # NOT ENABLED  - prefer_int_literals
    - prefer_interpolation_to_compose_strings
    - prefer_is_empty
    - prefer_is_not_empty
    - prefer_is_not_operator
    - prefer_iterable_whereType
    # NOT ENABLED  - prefer_mixin
    - prefer_null_aware_method_calls
    - prefer_null_aware_operators
    # - prefer_relative_imports # we do not use relative imports
    - prefer_single_quotes
    - prefer_spread_collections
    # NOT ENABLED  - prefer_typing_uninitialized_variables
    - prefer_void_to_null
    # NOT ENABLED  - provide_deprecation_message
    # - public_member_api_docs # do not use for an application, only a library
    - recursive_getters
    - require_trailing_commas
    - secure_pubspec_urls
    - sized_box_for_whitespace
    - sized_box_shrink_expand
    - slash_for_doc_comments
    - sort_child_properties_last
    # NOT ENABLED  - sort_constructors_first
    # - sort_pub_dependencies # Too strict
    # NOT ENABLED  - sort_unnamed_constructors_first
    # NOT ENABLED  - test_types_in_equals
    # NOT ENABLED  - throw_in_finally
    # NOT ENABLED  - tighten_type_of_initializing_formals
    # - type_annotate_public_apis # subset of always_specify_types
    - type_init_formals
    - unawaited_futures
    - unnecessary_await_in_return
    - unnecessary_brace_in_string_interps
    # NOT YET AVAILABLE  - unnecessary_breaks
    - unnecessary_const
    # - unnecessary_final # having finals is the preferred approach
    - unnecessary_getters_setters
    - unnecessary_lambdas
    - unnecessary_late
    # NOT YET AVAILABLE  - unnecessary_library_directive
    - unnecessary_new
    # NOT ENABLED  - unnecessary_null_aware_assignments
    # NOT ENABLED  - unnecessary_null_checks
    - unnecessary_null_in_if_null_operators
    # NOT ENABLED  - unnecessary_nullable_for_final_variable_declarations
    # NOT ENABLED  - unnecessary_overrides
    - unnecessary_parenthesis
    # BEST PRACTICES  - unnecessary_raw_strings
    # NOT ENABLED  - unnecessary_statements
    - unnecessary_string_escapes
    - unnecessary_string_interpolations
    - unnecessary_this
    - unnecessary_to_list_in_spreads
    # NOT YET AVAILABLE  - unreachable_from_main
    - unrelated_type_equality_checks
    - unsafe_html
    # - use_build_context_synchronously # Not working with StatelessWidget
    - use_colored_box
    - use_decorated_box
    - use_enums
    - use_full_hex_values_for_flutter_colors
    - use_function_type_syntax_for_parameters
    # NOT ENABLED  - use_if_null_to_convert_nulls_to_bools
    # NOT ENABLED  - use_is_even_rather_than_modulo
    - use_key_in_widget_constructors
    # NOT ENABLED  - use_late_for_private_fields_and_variables
    # BEST PRACTICES  - use_named_constants
    - use_raw_strings
    - use_rethrow_when_possible
    # NOT ENABLED  - use_setters_to_change_properties
    # NOT ENABLED  - use_string_buffers
    # NOT YET AVAILABLE  - use_string_in_part_of_directives
    - use_super_parameters
    - use_test_throws_matchers
    # NOT ENABLED  - use_to_and_as_if_applicable
    - valid_regexps
    # NOT ENABLED  - void_checks
